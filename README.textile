h1. Dumbledore: generic metrics infrastructure

h2. Concepts

h3. Sensors and attributes

A basic entity in Dumbledore is a @Sensor@. A sensor corresponds, roughly speaking, to a Java class. Sensors contain attributes. Attributes are shared by all instance of a sensor. Each instance of a sensor has a unique object (a Java object) associated with it.

An @Attribute@ is a read-only parameter and maps onto a method of a class: it has a data type (e.g., a string, a long, a duration, size in bytes) and a metric type (is it a gauge, or is it a counter, etc...).
The attribute is associated with a specific method of a class. The idea of metric types is borrowed from RRDTool. The default metric type is @GAUGE@, meaning it will be graphed as in on an RRD tool graph.

One gets the value of an attribute on an _instance of a sensor_, by invoking the attribute's method on the object held by the instance.

h3. Types and domains

In order to efficiently retrieve sensors and query their attributes, sensors are given a domain and a type (the terminology is taken   from JMX). A (domain, type) combination is a unique way to retrieve a specific sensors: within a given domain, no more than one sensor can have the same type.

Intuitively, there are multiple ways to think about about domains: one way is to think of domains as grouping similar sensors (much like package names group similar classes), e.g., the domain is @voldemort.store.engine@ and types are @BdbStorageEngine@, @MySQLStorageEngine@. Another way to think about types and domains is grouping multiple instances of the same class under unique names e.g., in a multi-tenant Voldemort installation there is a domain @voldemort.stores@ and the types are @message-store@, @profile-store@. 

h3. Registry and listeners

A sensor is registered in a @Sensor Registry@. A sensor has to be manually unregistered to be removed. Sensor registration enforces the unique (domain, type) constraint. The registry can be queried for all domains, all sensors in a domain as well as specific sensor identified by a domain and a type. 

h4. Listeners

When registration happens, registration listeners are invoked. The idea is to allow additional monitoring systems such as JMX to hook into the registry without extending or modifying the registry code. 

A registry listener has to implement a simple interface:

<pre>
<code>
public interface SensorListener {

    public void registered(String domain, String type, SensorDescriptor sensor);

    public void unregistered(String domain, String type);
}

</code>
</pre>

